left_join(mapping_tibble, by = c("code", "code_source")) %>%
select(-code, -code_source, patient_id, visit_id, code = new_num)
px_final
View(mapping_tibble)
px_final %>% filter(is.na(code))
dx_final <-
dx_master %>%
select(patient_id, visit_id, code) %>%
left_join(mapping_tibble %>% filter(code_source == "dx"), by = "code") %>%
select(patient_id, visit_id, -code, code = new_num)
dx_final <-
dx_master %>%
select(patient_id, visit_id, code) %>%
mutate(code = as.character(code)) %>%
left_join(mapping_tibble %>% filter(code_source == "dx"), by = "code") %>%
select(patient_id, visit_id, -code, code = new_num)
dx_final %>% filter(is.na(code))
dx_final
all_codes <-
meds_final %>%
bind_rows(px_final) %>%
bind_rows(dx_final) %>%
arrange(patient_id, visit_id)
px_final
visit_seps <-
tibble(patient_id = all_codes$patient_id,
visit_id = all_codes$visit_id,
code = -2L,
sep = TRUE) %>%
distinct()
patient_seps <-
tibble(patient_id = unique(all_codes$patient_id),
visit_id = -1L,
code = -1L,
sep = TRUE)
codes_with_seps <-
all_codes %>%
mutate(sep = FALSE) %>%
bind_rows(visit_seps) %>%
bind_rows(patient_seps) %>%
arrange(patient_id, desc(visit_id), sep) %>%
select(code)
codes_with_seps
all_codes %>% filter(patient_id == 1)
codes_with_seps
all_codes %>% filter(patient_id == 1) %>% arrange(visit_id)
all_codes %>% filter(patient_id == 1) %>% arrange(desc(visit_id))
library(reticulate)
cPickle <- import("cPickle")
setwd("~/GitHub/med2vec")
py_save_object(codes_with_seps, filename = "codes_with_seps", pickle = "cPickle")
max(codes_with_seps$code)
min(codes_with_seps$code)
min(codes_with_seps$code %>% filter(code > 0))
min(codes_with_seps %>% filter(code > 0) %>% pull(code))
max(mapping_tibble$code)
max(mapping_tibble$new_num)
intersect(px_cpt_codes, px_icd9_codes)
length(px_master$code %>% unique())
length(px_cpt_codes)
length(px_cpt_codes) + length(px_icd9_codes)
length(px_master$code %>% unique())
length(px_master %>% filter(code_source == "CPT") %>%  pull(code) %>% unique())
length(px_master %>% filter(code_source == "CPT") %>%  pull(code) %>% unique()) + length(px_master %>% filter(code_source != "CPT") %>%  pull(code) %>% unique())
codes_to_use
codes_to_use %>%
left_join(mapping_tibble, by = "code") %>%
filter(is.na(new_num))
px_cpt_codes[px_cpt_codes == "92310."]
px_cpt_codes[px_cpt_codes == "92310"]
codes_to_use %>% filter(code == "92310")
codes_to_use %>% filter(code == "92310.")
codes_to_use %>% filter(code == "92310")
str_extract("83.", "[A-z]*\\d+\\.*[A-z]*")
px_cpt_codes[px_cpt_codes == "92310/"]
px_cpt_codes[px_cpt_codes == "92310/"]
px_cpt_codes[px_cpt_codes == "92310."]
px_cpt_codes
str_extract("83.", "[A-z]*\\d+\\.*[A-z]*")
str_extract("92310.", "[A-z]*\\d+\\.*[A-z]*")
px_cpt_codes <-
codes_to_use %>%
filter(code_source == "CPT") %>%
pull(code)
px_cpt_codes[px_cpt_codes == "92310."]
px_cpt_codes[px_cpt_codes == "92310."]
codes_to_use <-
most_common_codes %>%
separate(code, into = c("code", "code_source"), sep = ", ") %>%
mutate(code = str_extract(code, "[A-z]*\\d+\\.*[A-z]*"),
code_source = str_extract(code_source, "[A-z]+"))
# there are no icd9 dx codes that make the top 10,000
# there are only cpt codes, dx_ids, icd_px_ids, and rxnorms
codes_to_use %>% count(code_source)
dx_id_codes <-
codes_to_use %>%
filter(code_source == "DX_ID") %>%
pull(code)
px_icd9_codes <-
codes_to_use %>%
filter(str_detect(code_source, "ICD")) %>%
pull(code) %>%
as.character()
px_cpt_codes <-
codes_to_use %>%
filter(code_source == "CPT") %>%
pull(code)
med_rx_codes <-
codes_to_use %>%
filter(code_source == "RXNORM") %>%
pull(code)
# Map from dx_ids to icd9 codes
dx_map <-
tbl(con, "dictionary_diagnoses_SHC") %>%
select(dx_id, ref_bill_code, current_icd9_list)
# Collect dx_map
dx_map_local <-
dx_map %>%
mutate(ref_bill_code = as.integer(ref_bill_code)) %>%
collect()
# tibble of all patients with diagnosis and visit codes
dx_master <-
tbl(con, "dx_master") %>%
mutate(code = as.integer(code)) %>%
filter(!str_detect(table_source, "LPCH"),
code_source == "DX_ID",
(code %in% dx_id_codes)) %>%
collect()
# All procedures done
px_master <-
tbl(con, "px_master") %>%
filter(!str_detect(table_source, "LPCH"),
(code_source == "CPT" & code %in% px_cpt_codes) |
(code_source == "ICD_PX_ID" & code %in% px_icd9_codes)) %>%
collect()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(purrr)
library(stringr)
library(DBI)
library(dbplyr)
library(RMySQL)
con <-
dbConnect(
drv = RMySQL::MySQL(),
dbname = "stride7",
host = "shahlab-db1.stanford.edu",
username = "skaltman",
password = "MdXoI-pnGZwb"
)
#setwd("/home/skaltman")
most_common_codes <- read_rds("most_common_codes_10000.rds")
codes_to_use <-
most_common_codes %>%
separate(code, into = c("code", "code_source"), sep = ", ") %>%
mutate(code = str_extract(code, "[A-z]*\\d+\\.*[A-z]*"),
code_source = str_extract(code_source, "[A-z]+"))
# there are no icd9 dx codes that make the top 10,000
# there are only cpt codes, dx_ids, icd_px_ids, and rxnorms
codes_to_use %>% count(code_source)
dx_id_codes <-
codes_to_use %>%
filter(code_source == "DX_ID") %>%
pull(code)
px_icd9_codes <-
codes_to_use %>%
filter(str_detect(code_source, "ICD")) %>%
pull(code) %>%
as.character()
px_cpt_codes <-
codes_to_use %>%
filter(code_source == "CPT") %>%
pull(code)
med_rx_codes <-
codes_to_use %>%
filter(code_source == "RXNORM") %>%
pull(code)
# tibble of all patients with diagnosis and visit codes
dx_master <-
tbl(con, "dx_master") %>%
mutate(code = as.integer(code)) %>%
filter(!str_detect(table_source, "LPCH"),
code_source == "DX_ID",
(code %in% dx_id_codes)) %>%
collect()
# All procedures done
px_master <-
tbl(con, "px_master") %>%
filter(!str_detect(table_source, "LPCH"),
(code_source == "CPT" & code %in% px_cpt_codes) |
(code_source == "ICD_PX_ID" & code %in% px_icd9_codes)) %>%
collect()
meds <-
tbl(con, "SHC_med_de") %>%
select(patient_id, code = med_id, visit_id) %>%
filter(code %in% med_rx_codes) %>%
collect()
mapping_tibble <-
meds %>%
select(code) %>%
mutate(code = as.character(code),
code_source = "med") %>%
bind_rows(dx_master %>%
mutate(code_source = "dx", code = as.character(code)) %>%
select(code, code_source)) %>%
bind_rows(px_master %>% select(code, code_source)) %>%
distinct() %>%
arrange(code_source, code) %>%
mutate(new_num = row_number())
View(mapping_tibble)
meds_final <-
meds %>%
mutate(code = as.character(code)) %>%
left_join(mapping_tibble %>% filter(code_source == "med"), by = "code") %>%
select(-code, patient_id, visit_id, code = new_num)
px_final <-
px_master %>%
select(patient_id, visit_id, code, code_source) %>%
left_join(mapping_tibble, by = c("code", "code_source")) %>%
select(-code, -code_source, patient_id, visit_id, code = new_num)
dx_final <-
dx_master %>%
select(patient_id, visit_id, code) %>%
mutate(code = as.character(code)) %>%
left_join(mapping_tibble %>% filter(code_source == "dx"), by = "code") %>%
select(patient_id, visit_id, -code, code = new_num)
all_codes <-
meds_final %>%
bind_rows(px_final) %>%
bind_rows(dx_final) %>%
arrange(patient_id, visit_id)
visit_seps <-
tibble(patient_id = all_codes$patient_id,
visit_id = all_codes$visit_id,
code = -2L,
sep = TRUE) %>%
distinct()
patient_seps <-
tibble(patient_id = unique(all_codes$patient_id),
visit_id = -1L,
code = -1L,
sep = TRUE)
codes_with_seps <-
all_codes %>%
mutate(sep = FALSE) %>%
bind_rows(visit_seps) %>%
bind_rows(patient_seps) %>%
arrange(patient_id, desc(visit_id), sep) %>%
select(code)
py_save_object(codes_with_seps, filename = "codes_with_seps", pickle = "cPickle")
library(reticulate)
cPickle <- import("cPickle")
#py_save_object(list(codes_list), filename = "codes_list", pickle = "cPickle")
#View(py_load_object("codes_list"))
setwd("~/GitHub/med2vec")
py_save_object(codes_with_seps, filename = "codes_with_seps", pickle = "cPickle")
min(codes_with_seps %>% filter(code > 0) %>% pull(code))
max(mapping_tibble$new_num)
codes_to_use %>% filter(str_detect(code, "\\.$"))
px_cpt_codes %>% filter(code == "92310.")
tibble(code = px_cpt_codes) %>% filter(code == "92310.")
x_master %>% filter(code == "92310.")
px_master %>% filter(code == "92310.")
px_master %>% filter(code == "92310")
tbl(con, "px_master") %>% filter(code == "92310/")
tbl(con, "px_master") %>% filter(code == "92310.")
tbl(con, "px_master") %>% filter(code == "92310")
tbl(con, "px_master") %>% filter(code == "92310.")
?summarise_at
library(tidyverse)
?summarise_at
?group_by_at
?select
?select_all
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
modified_between_as_pred
source('thesis_code.R')
knit('thesis.Rmd')
source('thesis_code.R')
knitr::knit('thesis.Rmd')
getwd()
setwd("~/GitHub/skaltman/yvw-thesis")
source('thesis_code.R')
knitr::knit('thesis.Rmd')
modified_between_as_pred
modified_between_as_pred <- between_condition_stats(modified_tidy, as_predicted, "1")
modified_between_as_pred
plot_predicted <- function(data) {
proportion_by_condition_plot(data,
as_predicted,
1,
response_colors,
"Behavior is as predicted",
"Behaves as predicted",
c("As predicted", "Not as predicted"))
}
plot_as_predicted(modified_tidy)
plot_predicted(modified_tidy)
plot_predicted <- function(data) {
proportion_by_condition_plot(data,
as_predicted,
0,
response_colors,
"",
"Target toy matches prediction",
c("Yes", "No"))
}
plot_predicted(modified_tidy)
plot_predicted <- function(data) {
proportion_by_condition_plot(data,
as_predicted,
1,
response_colors,
"",
"Target toy matches prediction",
c("No", "Yes"))
}
plot_predicted(modified_tidy)
predicted_colors <- c("#dddddd", "#c994c7")
predicted_colors <- c("#dddddd", "#c994c7")
plot_predicted <- function(data) {
proportion_by_condition_plot(data,
as_predicted,
1,
predicted_colors,
"",
"Target toy matches prediction",
c("No", "Yes"))
}
plot_predicted(modified_tidy)
predicted_colors <- c("#dddddd", "#756bb1")
plot_predicted(modified_tidy)
predicted_colors <- c("#dddddd", "#8856a7")
plot_predicted(modified_tidy)
plot_responses(modified_tidy)
modified_between_helpful <-
modified_tidy %>%
between_helpful_stats()
source('thesis_code.R')
knitr::knit('thesis.Rmd')
modified_between_helpful <-
modified_tidy %>%
between_helpful_stats()
modified_between_helpful <-
modified_tidy %>%
between_condition_helpful()
modified_between_helpful
modified_between_helpful <-
modified_tidy %>%
between_condition_helpful(digits = 2)
modified_between_helpful
modified_between_helpful <-
modified_tidy %>%
between_condition_helpful(digits = 2)
modified_between_helpful <-
modified_tidy %>%
between_condition_helpful(digits = 3)
modified_between_helpful
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful()
modified_within_helpful
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful(digits = 2)
modified_within_helpful
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful(digits = 3)
modified_within_helpful
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful(digits = 4)
modified_within_helpful
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful()
modified_within_helpful
modified_tidy %>%
within_condition_helpful()
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful(digits = 10)
modified_within_helpful
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful(digits = 4)
modified_within_helpful
modified_tidy %>%
within_condition_helpful(digits = 3)
modified_within_helpful <-
modified_tidy %>%
within_condition_helpful(digits = 3)
modified_within_helpful
plot_helpfulness(modified_tidy)
plot_flip(modified_tidy)
between_condition_flip <- function(data, digits = 4) {
between_condition_stats(data, flip, "1", digits = digits)
}
modified$childFlips
two_toy$childFlips
between_condition_flip <- function(data, digits = 4) {
between_condition_stats(data, childFlips, "yes", digits = digits)
}
modified_between_flip <-
modified_tidy %>%
between_condition_flip()
modified_between_flip
modified_tidy %>% count(childFlips, condition)
plot_flip(modified_tidy)
modified_tidy$flip
between_condition_flip <- function(data, digits = 4) {
between_condition_stats(data, flip, TRUE, digits = digits)
}
modified_between_flip <-
modified_tidy %>%
between_condition_flip()
between_condition_flip <- function(data, digits = 4) {
between_condition_stats(data, flip, "TRUE", digits = digits)
}
modified_between_flip <-
modified_tidy %>%
between_condition_flip()
modified_between_flip
modified_between_flip <-
modified_tidy %>%
between_condition_flip(digits = 10)
modified_between_flip
within_condition_stats(data, flip, "TRUE", digits = digits)
within_condition_flip <- function(data, digits = 4) {
within_condition_stats(data, flip, "TRUE", digits = digits)
}
modified_within_flip <-
modified_tidy %>%
within_condition_flip()
modified_within_flip
modified_within_flip <-
modified_tidy %>%
within_condition_flip(digits = 10)
modified_within_flip
plot_flip <- function(data) {
proportion_by_condition_plot(data,
flip,
TRUE,
flip_colors,
"Target button type by condition",
"Target button of response",
c("Non-obvious", "Obvious"))
}
plot_flip(modified_tidy)
plot_flip <- function(data) {
proportion_by_condition_plot(data,
flip,
TRUE,
flip_colors,
"Button type targeted by condition",
"Target button of first response",
c("Non-obvious", "Obvious"))
}
plot_flip(modified_tidy)
plot_flip <- function(data) {
proportion_by_condition_plot(data,
flip,
TRUE,
flip_colors,
"Button type targeted by condition",
"Target button of first response",
c("Obvious", "Non-obvious"))
}
plot_flip(modified_tidy)
flip_colors <- c("#ffffb3", "#fec44f")
plot_flip(modified_tidy)
flip_colors <- c("#ffdb69", "#f08226")
plot_flip(modified_tidy)
three_between_flip <-
three_toy_tidy %>%
between_condition_flip()
three_between_flip
three_between_flip <-
three_toy_tidy %>%
between_condition_flip(digits = 10)
three_between_flip
three_between_flip <-
three_toy_tidy %>%
between_condition_flip(digits = 6)
three_between_flip
three_between_flip <-
three_toy_tidy %>%
between_condition_flip(digits = 8)
three_between_flip
three_between_flip <-
three_toy_tidy %>%
between_condition_flip(digits = 10)
three_between_flip
three_within_flip <-
three_toy_tidy %>%
within_condition_flip(digits - 10)
three_within_flip <-
three_toy_tidy %>%
within_condition_flip(digits = 10)
three_within_flip
three_within_flip <-
three_toy_tidy %>%
within_condition_flip(digits = 6)
three_within_flip
three_between_flip
three_within_flip
summary_three_toy
summary_three_toy <- summary_tibble(three_toy_tidy)
three_within_flip
three_toy_tidy %>%
plot_flip()
